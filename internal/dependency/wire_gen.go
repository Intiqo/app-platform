// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"github.com/Intiqo/app-platform/internal/database"
	"github.com/Intiqo/app-platform/internal/http/api"
	"github.com/Intiqo/app-platform/internal/http/handler"
	aws2 "github.com/Intiqo/app-platform/internal/pkg/cloud/aws"
	"github.com/Intiqo/app-platform/internal/pkg/config"
	"github.com/Intiqo/app-platform/internal/pkg/secrets"
	"github.com/Intiqo/app-platform/internal/repository"
	"github.com/Intiqo/app-platform/internal/service"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Injectors from wire.go:

func NewAWSConfig(profile string) (aws.Config, error) {
	config := aws2.NewAWSConfig(profile)
	return config, nil
}

// NewConfig returns a new AppConfig
func NewConfig(awsCfg aws.Config, options config.Options) (config.AppConfig, error) {
	manager := secrets.NewAWSSecretsManager(awsCfg)
	appConfig, err := config.NewConfig(options, manager)
	if err != nil {
		return config.AppConfig{}, err
	}
	return appConfig, nil
}

// NewDatabase returns a new database connection pool
func NewDatabase(cfg config.AppConfig) (*pgxpool.Pool, error) {
	pool := database.NewDB(cfg)
	return pool, nil
}

// NewAppApi returns a new AppApi
func NewAppApi(cfg config.AppConfig, awsCfg aws.Config, db *pgxpool.Pool) (*api.AppApi, error) {
	transactioner := repository.NewTransactioner(db)
	settingRepository := repository.NewSettingRepository(db)
	settingService := service.NewSettingService(transactioner, settingRepository)
	settingHandler := handler.NewSettingHandler(settingService)
	appApi := api.NewAppApi(cfg, settingHandler)
	return appApi, nil
}
