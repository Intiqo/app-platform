@echo off
setlocal EnableDelayedExpansion

rem Load environment variables from .env file
for /f "delims=" %%i in (.env) do set "%%i"

set AWS_PROFILE=App

rem Ensure AWS SSO session is active
aws sso login --profile %AWS_PROFILE%

rem Get the SSO access token
for /f "delims=" %%i in ('dir /b /o-d "%USERPROFILE%\.aws\sso\cache"') do (
    set SSO_CACHE_FILE=%%i
    goto :next
)
:next
for /f "tokens=*" %%i in ('type "%USERPROFILE%\.aws\sso\cache\%SSO_CACHE_FILE%" ^| jq -r ".accessToken"') do set "SSO_ACCESS_TOKEN=%%i"

rem Use the SSO access token to get the role credentials
aws sso get-role-credentials --account-id !AWS_ACCOUNT_ID! --role-name !AWS_ROLE_NAME! --access-token !SSO_ACCESS_TOKEN! --profile !AWS_PROFILE! > role_credentials.json

rem Read the role credentials from the JSON file
set "ROLE_CREDENTIALS="
for /f "tokens=*" %%i in (role_credentials.json) do set "ROLE_CREDENTIALS=!ROLE_CREDENTIALS!%%i"

rem Extract the credentials
for /f "tokens=*" %%i in ('jq -r ".roleCredentials.accessKeyId" role_credentials.json') do set "AWS_ACCESS_KEY_ID=%%i"
for /f "tokens=*" %%i in ('jq -r ".roleCredentials.secretAccessKey" role_credentials.json') do set "AWS_SECRET_ACCESS_KEY=%%i"
for /f "tokens=*" %%i in ('jq -r ".roleCredentials.sessionToken" role_credentials.json') do set "AWS_SESSION_TOKEN=%%i"

rem Append the credentials to .env.aws file
(
echo ## AWS Configuration - DO NOT CHANGE - AUTOGENERATED ##
echo AWS_REGION=!AWS_REGION!
echo AWS_ACCESS_KEY_ID=!AWS_ACCESS_KEY_ID!
echo AWS_SECRET_ACCESS_KEY=!AWS_SECRET_ACCESS_KEY!
echo AWS_SESSION_TOKEN=!AWS_SESSION_TOKEN!
) > .env.aws

rem Start Docker containers
docker-compose up -d

rem Clean up temporary file
del role_credentials.json

endlocal
pause
